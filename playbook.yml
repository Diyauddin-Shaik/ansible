---
- hosts: all
  become: yes
  tasks:
    - name: Install required packages
      apt:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg2

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Add Kubernetes GPG key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes APT key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: '0644'
        force: true

    - name: Add Kubernetes APT repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
        state: present

    - name: Install Kubernetes packages
      apt:
        name: "{{ kubernetes_packages }}"
        state: present
      vars:
        kubernetes_packages:
          - kubelet
          - kubeadm
          - kubectl

    - name: Hold Kubernetes packages
      apt:
        name: "{{ kubernetes_packages }}"
        state: present
      vars:
        kubernetes_packages:
          - kubelet
          - kubeadm
          - kubectl

    - name: Disable swap
      command: swapoff -a

    - name: Ensure swap is disabled on reboot
      replace:
        path: /etc/fstab
        regexp: '^(.*\sswap\s.*)$'
        replace: '# \1'

    - name: Install containerd
      apt:
        name: containerd
        state: present

    - name: Configure containerd
      copy:
        content: |
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = true
        dest: /etc/containerd/config.toml

    - name: Restart containerd
      service:
        name: containerd
        state: restarted
        enabled: yes

- hosts: master
  become: yes
  tasks:
    - name: Ports disable
      shell: |
        for port in 6443 10250 10259 10257 2379 2380; do
          fuser -k ${port}/tcp || true
        done
      args:
        executable: /bin/bash

    - name: Reset previous kubeadm
      command: kubeadm reset -f

    - name: Initialize Kubernetes cluster
      command: kubeadm init --pod-network-cidr=10.244.0.0/16
      register: kubeadm_init_output

    - name: Create .kube directory
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copy admin.conf to user's kube config
      command: cp /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config

    - name: Change permissions for kube config
      file:
        path: /home/{{ ansible_user }}/.kube/config
        state: file
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Set kubeconfig env
      shell: echo 'export KUBECONFIG=/home/{{ ansible_user }}/.kube/config' >> /home/{{ ansible_user }}/.bashrc

    - name: Wait for the Kubernetes API server to be ready
      shell: |
        export KUBECONFIG=/home/{{ ansible_user }}/.kube/config
        for i in {1..10}; do
          if kubectl get nodes; then
            break
          else
            sleep 10
          fi
        done
      environment:
        KUBECONFIG: /home/{{ ansible_user }}/.kube/config
      args:
        executable: /bin/bash

    - name: Install Flannel CNI
      command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: command
      command: kubeadm token create --print-join-command 
      register: join_command_output

- hosts: worker
  become: yes
  tasks:
    - name: Reset previous kubeadm configuration
      command: kubeadm reset -f
      ignore_errors: yes

    - name: Join the cluster
      command: "{{ hostvars['master'].join_command_output.stdout }}"
